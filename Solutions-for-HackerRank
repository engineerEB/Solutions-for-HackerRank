Weather Observation Station 5:

```diff
# Selecting shortest city so largest should be at the bottom hence ASC order
SELECT CITY, LENGTH(CITY) FROM STATION 
ORDER BY LENGTH(CITY), CITY 
LIMIT 1;

# Selecting shortest city so largest should be at the top hence DESC order
SELECT CITY, LENGTH(CITY) FROM STATION 
ORDER BY LENGTH(CITY) DESC, CITY 
LIMIT 1; 
```

Weather Observation Station 6:

```diff
# Use distinct to avoid duplicates. Use capital letter as first letters of cities will be capitals. 
SELECT DISTINCT CITY FROM STATION 
WHERE CITY LIKE 'A%' OR CITY LIKE 'E%' OR CITY LIKE 'I%' OR CITY LIKE 'O%' OR CITY LIKE 'U%';
```

Weather Observation Station 7:

```diff
SELECT DISTINCT CITY FROM STATION
WHERE CITY like '%a' OR CITY like '%e' OR CITY like '%i' OR CITY like '%o' OR CITY like '%u';
```

Weather Observation Station 8:

```diff
SELECT DISTINCT CITY FROM STATION 
WHERE (CITY like 'A%' OR CITY like 'E%' OR CITY like 'I%' OR CITY like 'O%' OR CITY like 'U%') AND (CITY like '%a' OR CITY like '%e' OR CITY like '%i' OR CITY like '%o' OR CITY like '%u');
```

Weather Observation Station 9:

```diff
SELECT DISTINCT CITY FROM STATION
WHERE NOT (CITY LIKE 'A%' OR  CITY  LIKE 'E%' OR CITY  LIKE 'I%' OR CITY  LIKE 'O%' OR CITY  LIKE 'U%');
```

Weather Observation Station 10

```diff
SELECT DISTINCT CITY FROM STATION
WHERE NOT (CITY like '%a' OR CITY like '%e' OR CITY like '%i' OR CITY like '%o' OR CITY like '%u');
```

Weather Observation Station 11

```diff
SELECT DISTINCT CITY FROM STATION 
WHERE NOT ((CITY like 'A%' OR CITY like 'E%' OR CITY like 'I%' OR CITY like 'O%' OR CITY like 'U%') AND (CITY like '%a' OR CITY like '%e' OR CITY like '%i' OR CITY like '%o' OR CITY like '%u'));
```

Weather Observation Station 12

```diff
SELECT DISTINCT CITY FROM STATION 
WHERE NOT ((CITY like 'A%' OR CITY like 'E%' OR CITY like 'I%' OR CITY like 'O%' OR CITY like 'U%') OR (CITY like '%a' OR CITY like '%e' OR CITY like '%i' OR CITY like '%o' OR CITY like '%u'));
```

Higher Than 75 Marks

```diff
SELECT NAME FROM STUDENTS 
WHERE MARKS > 75
ORDER BY RIGHT(NAME, 3), ID ASC;
```

Employee Names

```diff
SELECT NAME FROM Employee
ORDER BY NAME ASC;
```

Employee Salaries

```diff
SELECT NAME FROM Employee
WHERE salary > 2000 AND months < 10
ORDER BY employee_id ASC;
```

MEDIUM PROBLEMS

Contest Leaderboard (Needs explanation improved)
We construct the Subquery by knowing we need Max score for all challenges and the hackers id. We need to filter by ASC hacker id if they have the same score and then by total score.
We then take the sum of the max scores as the total score. From this we need to merge the two tables, the h (hacker) table to the 
```diff
SELECT h.hacker_id, h.name, t1.total_score
  FROM (
        SELECT hacker_id, SUM(max_score) AS total_score
          FROM (
                SELECT hacker_id, MAX(score) AS max_score
                  FROM Submissions
                GROUP BY hacker_id, challenge_id
               ) t
        GROUP BY hacker_id
       ) t1
  JOIN Hackers h
    ON h.hacker_id = t1.hacker_id
 WHERE t1.total_score <> 0
 ORDER BY total_score DESC, hacker_id;
```

New Companies (must be expalined)

```diff
select C.company_code, 
       C.founder, 
       COUNT(DISTINCT E.lead_manager_code), 
       COUNT(DISTINCT E.senior_manager_code), 
       COUNT(DISTINCT E.manager_code), 
       COUNT(DISTINCT E.employee_code) 
              from Company C
              INNER JOIN Employee E ON C.company_code = E.company_code
              GROUP BY C.company_code, C.founder
              ORDER BY C.company_code ASC;
              ```

The Pads
```
SELECT concat(Name,'(',substr(OCCUPATION,1,1),')') AS name
FROM OCCUPATIONS
ORDER BY name;
SELECT concat('There are a total of ',COUNT(OCCUPATION),' ',LOWER(OCCUPATION),'s.')
FROM OCCUPATIONS
GROUP BY OCCUPATION
ORDER BY COUNT(OCCIPATION), OCCUPATION;
```

Occupations (Explain)
```
set @r1=0, @r2=0, @r3=0, @r4=0;
select min(Doctor), min(Professor), min(Singer), min(Actor)
from(
  select case when Occupation='Doctor' then (@r1:=@r1+1)
            when Occupation='Professor' then (@r2:=@r2+1)
            when Occupation='Singer' then (@r3:=@r3+1)
            when Occupation='Actor' then (@r4:=@r4+1) end as RowNumber,
    case when Occupation='Doctor' then Name end as Doctor,
    case when Occupation='Professor' then Name end as Professor,
    case when Occupation='Singer' then Name end as Singer,
    case when Occupation='Actor' then Name end as Actor
  from OCCUPATIONS
  order by Name
	) temp
group by RowNumber;
```

Binary Tree Nodes
```
SELECT CASE
	WHEN P IS NULL THEN CONCAT(N, ' Root')
	WHEN N IN (SELECT DISTINCT P FROM BST) THEN CONCAT(N, ' Inner')
	ELSE CONCAT(N, ' Leaf')
	END
FROM BST
ORDER BY N ASC
```

Print Prime Numbers (Explained)
```
 SET @number = 1;
   SET @divisor = 1;
SELECT GROUP_CONCAT(n SEPARATOR '&')
  FROM (SELECT @number := @number + 1 AS n 
          FROM information_schema.tables AS t1, information_schema.tables AS t2
         LIMIT 1000
       ) AS n1
 WHERE NOT EXISTS(SELECT *
                    FROM (SELECT @divisor := @divisor + 1 AS d
                            FROM information_schema.tables AS t3, information_schema.tables AS t4
                           LIMIT 1000
                         ) AS n2
                   WHERE MOD(n, d) = 0 AND n <> d)```
                   
Weather Observation Station 18
```
SELECT ROUND(ABS(MIN(lat_n)-MAX(lat_n))+ABS(MIN(long_w)-MAX(long_w)),4) FROM station;
```

Weather Observation Station 19
```
SELECT ROUND(SQRT(
POWER(MAX(LAT_N)  - MIN(LAT_N),  2)
+ POWER(MAX(LONG_W) - MIN(LONG_W), 2)
    ), 4)
FROM STATION;
```

Weather Observation Station 20 (Explain)
```
SET @N := 0;
SELECT COUNT(*) FROM STATION INTO @TOTAL;
SELECT
    ROUND(AVG(A.LAT_N), 4)
FROM (SELECT @N := @N +1 AS ROW_ID, LAT_N FROM STATION ORDER BY LAT_N) A
WHERE
    CASE WHEN MOD(@TOTAL, 2) = 0 
    THEN A.ROW_ID IN (@TOTAL/2, (@TOTAL/2+1))
    ELSE A.ROW_ID = (@TOTAL+1)/2
END
```

The Blunder
```
SELECT CEIL(AVG(Salary)-AVG(REPLACE(Salary,'0',''))) FROM EMPLOYEES;
```

Top Earners
```
SELECT (salary*months) as earnings,
COUNT(*) FROM employee
GROUP BY 1
ORDER BY earnings DESC 
LIMIT 1;
```

Weather Observation Station 2
```
SELECT ROUND(SUM(LAT_N),2) AS lat, ROUND(SUM(LONG_W),2) AS lon
FROM Station
```
Weather Obvservation Station 14
```
SELECT ROUND(MAX(LAT_N), 4) FROM STATION
WHERE LAT_N < 137.2345
```

Weather Observation Station 15
```
SELECT ROUND(LONG_W, 4) FROM STATION
WHERE LAT_N < 137.2345
ORDER BY LAT_N DESC
LIMIT 1;
```
Weather Observation Station 16
```
SELECT ROUND(MIN(LAT_N), 4) FROM STATION
WHERE LAT_N > 38.7780;
```

Average Population
```
SELECT FLOOR(AVG(POPULATION)) FROM CITY;
```

Japan Population
```
SELECT SUM(POPULATION) FROM CITY
WHERE COUNTRYCODE = 'JPN';
```

Population Density Difference
```
SELECT (MAX(POPULATION)-MIN(POPULATION)) FROM CITY;
```

Revising Aggregations - The Count Function
```
SELECT COUNT(*) FROM CITY
WHERE POPULATION > 100000;
```

Revising Aggregations - The Sum Function
```
SELECT SUM(POPULATION) FROM CITY 
WHERE DISTRICT="CALIFORNIA"; 
```

Revising Aggregations - Averages
```
SELECT AVG(POPULATION) FROM CITY
WHERE DISTRICT="California";
```

Symmetric Pairs (Explain)
```
SELECT A.x, A.y
FROM FUNCTIONS A JOIN FUNCTIONS B ON
    A.x = B.y AND A.y = B.x
GROUP BY A.x, A.y
HAVING COUNT(A.x) > 1 OR A.x < A.y
ORDER BY A.x
```

Interviews (NOT SOLVED NEED EXPLAIN TOO REVISIT THIS)
```
select con.contest_id,
        con.hacker_id, 
        con.name, 
        sum(total_submissions), 
        sum(total_accepted_submissions), 
        sum(total_views), sum(total_unique_views)
from contests con 
join colleges col on con.contest_id = col.contest_id 
join challenges cha on  col.college_id = cha.college_id 
left join
(select challenge_id, sum(total_views) as total_views, sum(total_unique_views) as total_unique_views
from view_stats group by challenge_id) vs on cha.challenge_id = vs.challenge_id 
left join
(select challenge_id, sum(total_submissions) as total_submissions, sum(total_accepted_submissions) as total_accepted_submissions from submission_stats group by challenge_id) ss on cha.challenge_id = ss.challenge_id
    group by con.contest_id, con.hacker_id, con.name
        having sum(total_submissions)!=0 or 
                sum(total_accepted_submissions)!=0 or
                sum(total_views)!=0 or
                sum(total_unique_views)!=0
            order by contest_id;
```

Population Census
```
SELECT SUM(CITY.POPULATION) FROM CITY, COUNTRY
WHERE CITY.CountryCode = COUNTRY.Code AND COUNTRY.CONTINENT = 'Asia';
```

African Cities
```
SELECT CITY.NAME FROM CITY
JOIN COUNTRY ON CITY.COUNTRYCODE = COUNTRY.CODE
WHERE CONTINENT = 'Africa';
```

Average Population of Each Continent
```
SELECT COUNTRY.CONTINENT, FLOOR(AVG(CITY.POPULATION))
FROM CITY INNER JOIN COUNTRY
ON CITY.COUNTRYCODE = COUNTRY.CODE
GROUP BY COUNTRY.CONTINENT;
```

The Report
```
SELECT IF(GRADE < 8, NULL, NAME), GRADE, MARKS 
FROM STUDENTS JOIN GRADES
WHERE MARKS BETWEEN MIN_MARK AND MAX_MARK
ORDER BY GRADE DESC, NAME, MARKS
```

Draw The Triangle 1
```
SET @number = 21;
SELECT repeat('* ', @number := @number - 1) FROM information_schema.tables;
```

Draw The Triangle 2
```
SET @number = 0;
SELECT repeat('* ', @number := @number + 1) FROM information_schema.tables
LIMIT 20;
```



