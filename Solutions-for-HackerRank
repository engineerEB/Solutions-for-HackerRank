Weather Observation Station 5:

```diff
# Selecting shortest city so largest should be at the bottom hence ASC order
SELECT CITY, LENGTH(CITY) FROM STATION 
ORDER BY LENGTH(CITY), CITY 
LIMIT 1;

# Selecting shortest city so largest should be at the top hence DESC order
SELECT CITY, LENGTH(CITY) FROM STATION 
ORDER BY LENGTH(CITY) DESC, CITY 
LIMIT 1; 
```

Weather Observation Station 6:

```diff
# Use distinct to avoid duplicates. Use capital letter as first letters of cities will be capitals. 
SELECT DISTINCT CITY FROM STATION 
WHERE CITY LIKE 'A%' OR CITY LIKE 'E%' OR CITY LIKE 'I%' OR CITY LIKE 'O%' OR CITY LIKE 'U%';
```

Weather Observation Station 7:

```diff
SELECT DISTINCT CITY FROM STATION
WHERE CITY like '%a' OR CITY like '%e' OR CITY like '%i' OR CITY like '%o' OR CITY like '%u';
```

Weather Observation Station 8:

```diff
SELECT DISTINCT CITY FROM STATION 
WHERE (CITY like 'A%' OR CITY like 'E%' OR CITY like 'I%' OR CITY like 'O%' OR CITY like 'U%') AND (CITY like '%a' OR CITY like '%e' OR CITY like '%i' OR CITY like '%o' OR CITY like '%u');
```

Weather Observation Station 9:

```diff
SELECT DISTINCT CITY FROM STATION
WHERE NOT (CITY LIKE 'A%' OR  CITY  LIKE 'E%' OR CITY  LIKE 'I%' OR CITY  LIKE 'O%' OR CITY  LIKE 'U%');
```

Weather Observation Station 10

```diff
SELECT DISTINCT CITY FROM STATION
WHERE NOT (CITY like '%a' OR CITY like '%e' OR CITY like '%i' OR CITY like '%o' OR CITY like '%u');
```

Weather Observation Station 11

```diff
SELECT DISTINCT CITY FROM STATION 
WHERE NOT ((CITY like 'A%' OR CITY like 'E%' OR CITY like 'I%' OR CITY like 'O%' OR CITY like 'U%') AND (CITY like '%a' OR CITY like '%e' OR CITY like '%i' OR CITY like '%o' OR CITY like '%u'));
```

Weather Observation Station 12

```diff
SELECT DISTINCT CITY FROM STATION 
WHERE NOT ((CITY like 'A%' OR CITY like 'E%' OR CITY like 'I%' OR CITY like 'O%' OR CITY like 'U%') OR (CITY like '%a' OR CITY like '%e' OR CITY like '%i' OR CITY like '%o' OR CITY like '%u'));
```

Higher Than 75 Marks

```diff
SELECT NAME FROM STUDENTS 
WHERE MARKS > 75
ORDER BY RIGHT(NAME, 3), ID ASC;
```

Employee Names

```diff
SELECT NAME FROM Employee
ORDER BY NAME ASC;
```

Employee Salaries

```diff
SELECT NAME FROM Employee
WHERE salary > 2000 AND months < 10
ORDER BY employee_id ASC;
```

MEDIUM PROBLEMS

Contest Leaderboard (Needs explanation improved)
We construct the Subquery by knowing we need Max score for all challenges and the hackers id. We need to filter by ASC hacker id if they have the same score and then by total score.
We then take the sum of the max scores as the total score. From this we need to merge the two tables, the h (hacker) table to the 
```diff
SELECT h.hacker_id, h.name, t1.total_score
  FROM (
        SELECT hacker_id, SUM(max_score) AS total_score
          FROM (
                SELECT hacker_id, MAX(score) AS max_score
                  FROM Submissions
                GROUP BY hacker_id, challenge_id
               ) t
        GROUP BY hacker_id
       ) t1
  JOIN Hackers h
    ON h.hacker_id = t1.hacker_id
 WHERE t1.total_score <> 0
 ORDER BY total_score DESC, hacker_id;
```

New Companies (must be expalined)

```diff
select C.company_code, 
       C.founder, 
       COUNT(DISTINCT E.lead_manager_code), 
       COUNT(DISTINCT E.senior_manager_code), 
       COUNT(DISTINCT E.manager_code), 
       COUNT(DISTINCT E.employee_code) 
              from Company C
              INNER JOIN Employee E ON C.company_code = E.company_code
              GROUP BY C.company_code, C.founder
              ORDER BY C.company_code ASC;
              ```

The Pads
```
SELECT concat(Name,'(',substr(OCCUPATION,1,1),')') AS name
FROM OCCUPATIONS
ORDER BY name;
SELECT concat('There are a total of ',COUNT(OCCUPATION),' ',LOWER(OCCUPATION),'s.')
FROM OCCUPATIONS
GROUP BY OCCUPATION
ORDER BY COUNT(OCCIPATION), OCCUPATION;
```

Occupations
```

